apiVersion: argoproj.io/v1alpha1   # Argo Rollouts API version
kind: Rollout                      # Resource type: Rollout
metadata:
  name: example-rollout            # Rollout name (must be unique)
  namespace: default               # Namespace where rollout will be deployed

spec:
  replicas: 10                     # Total desired pods (stable + canary)
  revisionHistoryLimit: 3          # Keep last 3 revisions for rollback
  minReadySeconds: 30              # Pod must be ready for 30s before next step

  selector:                        # Pod selection criteria
    matchLabels:
      app: nginx                   # Only pods with app=nginx label

  template:                        # Pod template (like Deployment)
    metadata:
      labels:
        app: nginx                 # Pod will get this label
    spec:
      affinity:                       # Pod scheduling rules (defines where and how pods will be scheduled)
      podAntiAffinity:              # Means → do not place similar pods on the same node
      requiredDuringSchedulingIgnoredDuringExecution:   # This is a HARD rule (must be followed)
      - labelSelector:          # Defines which pods to compare against
          matchExpressions:     # Way to define label-based conditions
            - key: app          # Pod label key → "app"
              operator: In      # Operator → means value must match one in the list
              values:           # Acceptable values list
                - demo-app      # Rule applies only to pods with label app=demo-app
        topologyKey: "kubernetes.io/hostname"   # Node-level factor → do not schedule pods with the same label on the same hostname

      containers:
        - name: nginx              # Container name
          image: nginx:1.15.4      # Container image
          ports:
            - containerPort: 80    # App listens inside pod on port 80

  strategy:
    canary:                        # Use Canary deployment strategy

      canaryService: hotstar-canary    # Service for Canary pods
      stableService: hotstar-stable    # Service for Stable pods

      trafficRouting:                  # Traffic split rules
        nginx:                         # Using NGINX ingress controller
          stableIngress: hotstar-ingress  # Stable ingress name

      maxSurge: '25%'              # Allow up to 25% extra pods during update
      maxUnavailable: 0            # Ensure no pods are unavailable during rollout

      # -------------------------------
      # Newly added advanced settings
      # -------------------------------
      dynamicStableScale: true          # Scale down stable pods dynamically as canary scales up
      abortScaleDownDelaySeconds: 600   # If rollout is aborted, wait 600s before scaling down canary pods

      steps: 
         # Step 1: Send 20% traffic to canary
        - setWeight: 20
        - setCanaryScale:
            replicas: 3          #  Fix 3 canary pods (20% traffic, pods fix 3 number)
        - pause: { duration: 30s }
        # -------------------------------
        # First step analysis step
        # -------------------------------
        - analysis:
            templates:
              - templateName: success-rate-check
            args:
              - name: service-name
                value: hotstar-canary
        # Step 2: Increase to 50% traffic
        - setWeight: 50
        - setCanaryScale:
            weight: 25           #  Canary pods = 25% of total (≈2-3 pods)
        - pause: { duration: 30s }
        - pause: {}                # Indefinite pause (manual approval required)  use prompt to next 
        # -------------------------------
        # Second Step analysis step
        # -------------------------------
        - analysis:
            templates:
              - templateName: success-rate-check
            args:
              - name: service-name
                value: hotstar-canary

        # -------------------------------
        # Second step analysis step
        # -------------------------------
        - analysis:
            templates:
              - templateName: latency-check
        # Step 3: Increase to 90% traffic
        - setWeight: 90
        - setCanaryScale:
            matchTrafficWeight: true   #  Pods scale accorfing to  traffic %  (90% traffic → 9 pods)
         # Step 4: Final step
        - setWeight: 100
        - setCanaryScale:
            matchTrafficWeight: true   #  Pods scale accorfing to  traffic %  (100% traffic → 10 pods)

